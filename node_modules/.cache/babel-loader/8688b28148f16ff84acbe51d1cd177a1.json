{"ast":null,"code":"var _jsxFileName = \"F:\\\\Advance React Project\\\\Login-SignUp\\\\src\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // Auth Context\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n}); //Calculating Remaining time function\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n}; //Auth Context Provider\n\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  // initally check localstorage for token\n  const initialToken = localStorage.getItem(\"token\"); // State\n\n  const [token, setToken] = useState(initialToken); // Check for use login or not\n\n  const userIsLoggedIn = !!token; //Loginhandler\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n  }; //Logout handler\n\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["F:/Advance React Project/Login-SignUp/src/store/auth-context.js"],"names":["React","useState","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","AuthContextProvider","props","initialToken","localStorage","getItem","setToken","userIsLoggedIn","loginHandler","setItem","logoutHandler","removeItem","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;;AACA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AACtCC,EAAAA,KAAK,EAAE,EAD+B;AAEtCC,EAAAA,UAAU,EAAE,KAF0B;AAGtCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHkB;AAItCG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJsB,CAApB,CAApB,C,CAMA;;AACA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;AACjD,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACD,CAFD,C,CAIA;;;AACA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C;AACA,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB,CAF4C,CAI5C;;AACA,QAAM,CAACb,KAAD,EAAQc,QAAR,IAAoBjB,QAAQ,CAACc,YAAD,CAAlC,CAL4C,CAO5C;;AACA,QAAMI,cAAc,GAAG,CAAC,CAACf,KAAzB,CAR4C,CAU5C;;AACA,QAAMgB,YAAY,GAAG,CAAChB,KAAD,EAAQK,cAAR,KAA2B;AAC9CS,IAAAA,QAAQ,CAACd,KAAD,CAAR;AACAY,IAAAA,YAAY,CAACK,OAAb,CAAqB,OAArB,EAA8BjB,KAA9B;AACD,GAHD,CAX4C,CAgB5C;;;AACA,QAAMkB,aAAa,GAAG,MAAM;AAC1BJ,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,YAAY,CAACO,UAAb,CAAwB,OAAxB;AACD,GAHD;;AAKA,QAAMC,YAAY,GAAG;AACnBpB,IAAAA,KAAK,EAAEA,KADY;AAEnBC,IAAAA,UAAU,EAAEc,cAFO;AAGnBb,IAAAA,KAAK,EAAEc,YAHY;AAInBb,IAAAA,MAAM,EAAEe;AAJW,GAArB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,YAA7B;AAAA,cACGV,KAAK,CAACW;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAlCM;;GAAMZ,mB;;KAAAA,mB;AAoCb,eAAeX,WAAf","sourcesContent":["import React, { useState } from \"react\";\r\n// Auth Context\r\nconst AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n});\r\n//Calculating Remaining time function\r\nconst calculateRemainingTime = (expirationTime) => {\r\n  const currentTime = new Date().getTime();\r\n};\r\n\r\n//Auth Context Provider\r\nexport const AuthContextProvider = (props) => {\r\n  // initally check localstorage for token\r\n  const initialToken = localStorage.getItem(\"token\");\r\n\r\n  // State\r\n  const [token, setToken] = useState(initialToken);\r\n\r\n  // Check for use login or not\r\n  const userIsLoggedIn = !!token;\r\n\r\n  //Loginhandler\r\n  const loginHandler = (token, expirationTime) => {\r\n    setToken(token);\r\n    localStorage.setItem(\"token\", token);\r\n  };\r\n\r\n  //Logout handler\r\n  const logoutHandler = () => {\r\n    setToken(null);\r\n    localStorage.removeItem(\"token\");\r\n  };\r\n\r\n  const contextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: loginHandler,\r\n    logout: logoutHandler,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"]},"metadata":{},"sourceType":"module"}